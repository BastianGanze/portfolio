// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type {
  CallReducerFlags,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  ReducerEventContextInterface,
  SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId, 
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { TileContent as __TileContent } from "./tile_content_type";
import { Group as __Group } from "./group_type";
import { Zobrist as __Zobrist } from "./zobrist_type";
import { LinkHead as __LinkHead } from "./link_head_type";

export type Chains = {
  size: number,
  tiles: __TileContent[],
  groups: __Group[],
  stonesA: number,
  emptyList: __LinkHead,
  deadGroups: __LinkHead,
  zobrist: __Zobrist,
};

/**
 * A namespace for generated helper functions.
 */
export namespace Chains {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("size", AlgebraicType.createU8Type()),
      new ProductTypeElement("tiles", AlgebraicType.createArrayType(__TileContent.getTypeScriptAlgebraicType())),
      new ProductTypeElement("groups", AlgebraicType.createArrayType(__Group.getTypeScriptAlgebraicType())),
      new ProductTypeElement("stonesA", AlgebraicType.createU16Type()),
      new ProductTypeElement("emptyList", __LinkHead.getTypeScriptAlgebraicType()),
      new ProductTypeElement("deadGroups", __LinkHead.getTypeScriptAlgebraicType()),
      new ProductTypeElement("zobrist", __Zobrist.getTypeScriptAlgebraicType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Chains): void {
    Chains.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Chains {
    return Chains.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


