// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type {
  CallReducerFlags,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  ReducerEventContextInterface,
  SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId, 
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { JoinRandomGame } from "./join_random_game_reducer.ts";
export { JoinRandomGame };
import { MakeBoardGameMove } from "./make_board_game_move_reducer.ts";
export { MakeBoardGameMove };
import { MakeRandomBoardGameMove } from "./make_random_board_game_move_reducer.ts";
export { MakeRandomBoardGameMove };
import { MovePosition } from "./move_position_reducer.ts";
export { MovePosition };
import { MoveToRoom } from "./move_to_room_reducer.ts";
export { MoveToRoom };
import { SayHello } from "./say_hello_reducer.ts";
export { SayHello };
import { UserConnected } from "./user_connected_reducer.ts";
export { UserConnected };

// Import and reexport all table handle types
import { RoomTableHandle } from "./room_table.ts";
export { RoomTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserCursorTableHandle } from "./user_cursor_table.ts";
export { UserCursorTableHandle };
import { VersusGameInstanceTableHandle } from "./versus_game_instance_table.ts";
export { VersusGameInstanceTableHandle };

// Import and reexport all types
import { Coord } from "./coord_type.ts";
export { Coord };
import { DbBoardGame } from "./db_board_game_type.ts";
export { DbBoardGame };
import { DbBoardGameMove } from "./db_board_game_move_type.ts";
export { DbBoardGameMove };
import { DbBoardGameParam } from "./db_board_game_param_type.ts";
export { DbBoardGameParam };
import { DbVector2 } from "./db_vector_2_type.ts";
export { DbVector2 };
import { Outcome } from "./outcome_type.ts";
export { Outcome };
import { Player } from "./player_type.ts";
export { Player };
import { Room } from "./room_type.ts";
export { Room };
import { TttBoard } from "./ttt_board_type.ts";
export { TttBoard };
import { User } from "./user_type.ts";
export { User };
import { UserCursor } from "./user_cursor_type.ts";
export { UserCursor };
import { VersusGameInstance } from "./versus_game_instance_type.ts";
export { VersusGameInstance };

const REMOTE_MODULE = {
  tables: {
    room: {
      tableName: "room",
      rowType: Room.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    user_cursor: {
      tableName: "user_cursor",
      rowType: UserCursor.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    versus_game_instance: {
      tableName: "versus_game_instance",
      rowType: VersusGameInstance.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    join_random_game: {
      reducerName: "join_random_game",
      argsType: JoinRandomGame.getTypeScriptAlgebraicType(),
    },
    make_board_game_move: {
      reducerName: "make_board_game_move",
      argsType: MakeBoardGameMove.getTypeScriptAlgebraicType(),
    },
    make_random_board_game_move: {
      reducerName: "make_random_board_game_move",
      argsType: MakeRandomBoardGameMove.getTypeScriptAlgebraicType(),
    },
    move_position: {
      reducerName: "move_position",
      argsType: MovePosition.getTypeScriptAlgebraicType(),
    },
    move_to_room: {
      reducerName: "move_to_room",
      argsType: MoveToRoom.getTypeScriptAlgebraicType(),
    },
    say_hello: {
      reducerName: "say_hello",
      argsType: SayHello.getTypeScriptAlgebraicType(),
    },
    user_connected: {
      reducerName: "user_connected",
      argsType: UserConnected.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "JoinRandomGame", args: JoinRandomGame }
| { name: "MakeBoardGameMove", args: MakeBoardGameMove }
| { name: "MakeRandomBoardGameMove", args: MakeRandomBoardGameMove }
| { name: "MovePosition", args: MovePosition }
| { name: "MoveToRoom", args: MoveToRoom }
| { name: "SayHello", args: SayHello }
| { name: "UserConnected", args: UserConnected }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  joinRandomGame(gameParam: DbBoardGameParam) {
    const __args = { gameParam };
    let __writer = new BinaryWriter(1024);
    JoinRandomGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_random_game", __argsBuffer, this.setCallReducerFlags.joinRandomGameFlags);
  }

  onJoinRandomGame(callback: (ctx: ReducerEventContext, gameParam: DbBoardGameParam) => void) {
    this.connection.onReducer("join_random_game", callback);
  }

  removeOnJoinRandomGame(callback: (ctx: ReducerEventContext, gameParam: DbBoardGameParam) => void) {
    this.connection.offReducer("join_random_game", callback);
  }

  makeBoardGameMove(gameInstanceId: number, mv: DbBoardGameMove) {
    const __args = { gameInstanceId, mv };
    let __writer = new BinaryWriter(1024);
    MakeBoardGameMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("make_board_game_move", __argsBuffer, this.setCallReducerFlags.makeBoardGameMoveFlags);
  }

  onMakeBoardGameMove(callback: (ctx: ReducerEventContext, gameInstanceId: number, mv: DbBoardGameMove) => void) {
    this.connection.onReducer("make_board_game_move", callback);
  }

  removeOnMakeBoardGameMove(callback: (ctx: ReducerEventContext, gameInstanceId: number, mv: DbBoardGameMove) => void) {
    this.connection.offReducer("make_board_game_move", callback);
  }

  makeRandomBoardGameMove(gameInstanceId: number) {
    const __args = { gameInstanceId };
    let __writer = new BinaryWriter(1024);
    MakeRandomBoardGameMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("make_random_board_game_move", __argsBuffer, this.setCallReducerFlags.makeRandomBoardGameMoveFlags);
  }

  onMakeRandomBoardGameMove(callback: (ctx: ReducerEventContext, gameInstanceId: number) => void) {
    this.connection.onReducer("make_random_board_game_move", callback);
  }

  removeOnMakeRandomBoardGameMove(callback: (ctx: ReducerEventContext, gameInstanceId: number) => void) {
    this.connection.offReducer("make_random_board_game_move", callback);
  }

  movePosition(position: DbVector2) {
    const __args = { position };
    let __writer = new BinaryWriter(1024);
    MovePosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_position", __argsBuffer, this.setCallReducerFlags.movePositionFlags);
  }

  onMovePosition(callback: (ctx: ReducerEventContext, position: DbVector2) => void) {
    this.connection.onReducer("move_position", callback);
  }

  removeOnMovePosition(callback: (ctx: ReducerEventContext, position: DbVector2) => void) {
    this.connection.offReducer("move_position", callback);
  }

  moveToRoom(room: number) {
    const __args = { room };
    let __writer = new BinaryWriter(1024);
    MoveToRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_to_room", __argsBuffer, this.setCallReducerFlags.moveToRoomFlags);
  }

  onMoveToRoom(callback: (ctx: ReducerEventContext, room: number) => void) {
    this.connection.onReducer("move_to_room", callback);
  }

  removeOnMoveToRoom(callback: (ctx: ReducerEventContext, room: number) => void) {
    this.connection.offReducer("move_to_room", callback);
  }

  sayHello() {
    this.connection.callReducer("say_hello", new Uint8Array(0), this.setCallReducerFlags.sayHelloFlags);
  }

  onSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("say_hello", callback);
  }

  removeOnSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("say_hello", callback);
  }

  onUserConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("user_connected", callback);
  }

  removeOnUserConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("user_connected", callback);
  }

}

export class SetReducerFlags {
  joinRandomGameFlags: CallReducerFlags = 'FullUpdate';
  joinRandomGame(flags: CallReducerFlags) {
    this.joinRandomGameFlags = flags;
  }

  makeBoardGameMoveFlags: CallReducerFlags = 'FullUpdate';
  makeBoardGameMove(flags: CallReducerFlags) {
    this.makeBoardGameMoveFlags = flags;
  }

  makeRandomBoardGameMoveFlags: CallReducerFlags = 'FullUpdate';
  makeRandomBoardGameMove(flags: CallReducerFlags) {
    this.makeRandomBoardGameMoveFlags = flags;
  }

  movePositionFlags: CallReducerFlags = 'FullUpdate';
  movePosition(flags: CallReducerFlags) {
    this.movePositionFlags = flags;
  }

  moveToRoomFlags: CallReducerFlags = 'FullUpdate';
  moveToRoom(flags: CallReducerFlags) {
    this.moveToRoomFlags = flags;
  }

  sayHelloFlags: CallReducerFlags = 'FullUpdate';
  sayHello(flags: CallReducerFlags) {
    this.sayHelloFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get room(): RoomTableHandle {
    return new RoomTableHandle(this.connection.clientCache.getOrCreateTable<Room>(REMOTE_MODULE.tables.room));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userCursor(): UserCursorTableHandle {
    return new UserCursorTableHandle(this.connection.clientCache.getOrCreateTable<UserCursor>(REMOTE_MODULE.tables.user_cursor));
  }

  get versusGameInstance(): VersusGameInstanceTableHandle {
    return new VersusGameInstanceTableHandle(this.connection.clientCache.getOrCreateTable<VersusGameInstance>(REMOTE_MODULE.tables.versus_game_instance));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
