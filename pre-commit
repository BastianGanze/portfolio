#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const rootDir = path.resolve(__dirname, '../..');

const projects = [
  { name: 'bg-app', imageName: 'bg-app' },
  { name: 'bg-cms', imageName: 'bg-cms' },
  { name: 'bg-game-server', imageName: 'bg-game-server' }
];

const checkChanges = (projectName) => {
  try {
    const output = execSync('git diff --cached --name-only', { encoding: 'utf-8' });
    return output.split('\n').some(file => file.startsWith(`${projectName}/`));
  } catch (error) {
    console.error(`Error checking for changes in ${projectName}:`, error);
    process.exit(1);
  }
};

const incrementPatchVersion = (version) => {
  const versionParts = version.split('.');
  versionParts[2] = parseInt(versionParts[2]) + 1;
  return versionParts.join('.');
};

const updateProjectVersion = (project) => {
  const projectPath = path.join(rootDir, project.name);
  const versionFilePath = path.join(projectPath, 'VERSION');

  if (checkChanges(project.name)) {
    const currentVersion = fs.readFileSync(versionFilePath, 'utf-8').trim();
    const newVersion = incrementPatchVersion(currentVersion);

    // Update VERSION file
    fs.writeFileSync(versionFilePath, newVersion);

    console.log(`${project.name} version updated to ${newVersion}`);

    // Stage the updated files
    execSync(`git add ${versionFilePath}`);
    
    return true;
  }
  
  return false;
};

const main = () => {
  let changesDetected = false;
  
  for (const project of projects) {
    if (updateProjectVersion(project)) {
      changesDetected = true;
    }
  }
  
  if (changesDetected) {
    console.log('All necessary versions have been updated.');
  } else {
    console.log('No changes detected in the monitored projects.');
  }
};

main();